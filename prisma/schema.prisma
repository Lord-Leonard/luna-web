generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./bookstall.db"
}

model User {
  id           String   @id @default(cuid())
  name         String
  email        String   @unique
  passwordHash String
  updatedAt    DateTime @updatedAt

  updatedAdresses Adress[]
}

model Client {
  id        String  @id @default(cuid())
  number    String  @unique
  company   String?
  firstName String?
  lastName  String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  adressess Adress[]
  Invoices  Invoice[]

  @@unique(fields: [firstName, lastName], name: "fullName")
  @@unique([company])
}

model Adress {
  id              String   @id @default(cuid())
  number          String   @unique
  streetName      String
  streetNumber    String
  postCode        String
  city            String
  state           String
  billing         Boolean  @default(false)
  clientId        String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  updatedByUserId String?

  invoices  Invoice[]
  updatedBy User?     @relation(fields: [updatedByUserId], references: [id])
  client    Client    @relation(fields: [clientId], references: [id])

  @@index([streetName, streetNumber], map: "street")
}

model Nummernkreis {
  id     String  @id @default(cuid())
  number Int
  object String
  prefix String?
  suffix String?
}

model Invoice {
  id       String   @id @default(cuid())
  number   String   @unique
  date     DateTime @default(now())
  adressId String
  clientId String

  Adress    Adress            @relation(fields: [adressId], references: [id])
  client    Client            @relation(fields: [clientId], references: [id])
  positions InvoicePosition[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model InvoicePosition {
  id              String   @id @default(cuid())
  number          String
  performanceDate DateTime @default(now())
  amount          Int
  price           Decimal  @default(0)
  tax             Decimal  @default(19)

  product   Product? @relation(fields: [productId], references: [id])
  productId String?
  Invoice   Invoice  @relation(fields: [invoiceId], references: [id])
  invoiceId String
}

model Product {
  id          String  @id @default(cuid())
  brief       String  @unique()
  description String?
  price       Decimal
  tax         Decimal @default(0)

  InvoicePositions InvoicePosition[]
}

model Author {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  bio       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  books Book[]

  @@unique([firstName, lastName])
}

model Book {
  id        String   @id @default(cuid())
  title     String
  excerpt   String?
  authorId  String
  price     Decimal
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author Author  @relation(fields: [authorId], references: [id])
  stores Store[]
}

model Store {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  books Book[]
}
